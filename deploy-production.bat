@echo off
echo.
echo üöÄ PACIFIC LABS LMS - DEPLOYMENT AUTOMATICO
echo ==========================================
echo.

REM Verificar prerrequisitos
echo üìã Verificando prerrequisitos...

REM Verificar Node.js
node --version >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ùå Error: Node.js no est√° instalado
    pause
    exit /b 1
)

REM Verificar archivo .env
if not exist ".env" (
    echo ‚ùå Error: Archivo .env no encontrado
    echo Por favor configura las variables de entorno antes del deployment
    pause
    exit /b 1
)

REM Verificar credenciales de Google Cloud
if not exist "google-cloud-credentials.json" (
    echo ‚ùå Error: Credenciales de Google Cloud no encontradas
    echo Por favor agrega el archivo google-cloud-credentials.json
    pause
    exit /b 1
)

echo ‚úÖ Prerrequisitos verificados
echo.

REM Limpiar instalaci√≥n anterior
echo üßπ Limpiando instalaci√≥n anterior...
if exist "node_modules" rmdir /s /q node_modules
if exist ".next" rmdir /s /q .next
if exist "dist" rmdir /s /q dist

REM Instalar dependencias
echo üì¶ Instalando dependencias...
call npm ci
if %errorlevel% neq 0 (
    echo ‚ùå Error instalando dependencias
    pause
    exit /b 1
)

echo ‚úÖ Dependencias instaladas
echo.

REM Generar cliente de Prisma
echo üóÑÔ∏è Generando cliente de Prisma...
call npx prisma generate
if %errorlevel% neq 0 (
    echo ‚ùå Error generando cliente de Prisma
    pause
    exit /b 1
)

echo ‚úÖ Cliente de Prisma generado
echo.

REM Ejecutar migraciones de base de datos
echo üîÑ Ejecutando migraciones de base de datos...
call npx prisma db push
if %errorlevel% neq 0 (
    echo ‚ö†Ô∏è Advertencia: Error en migraciones de base de datos
    echo El sistema puede funcionar con funcionalidad limitada
)

REM Ejecutar migraci√≥n de video analytics
echo üìä Aplicando migraci√≥n de video analytics...
call npx prisma db execute --file="./prisma/migrations/add_video_analytics_system.sql" --preview-feature 2>nul
if %errorlevel% neq 0 (
    echo ‚ö†Ô∏è Migraci√≥n de analytics no aplicada (base de datos puede no soportar SQL directo)
)

echo.

REM Verificar sistema de videos
echo üé¨ Verificando sistema de videos...
node test-system-advanced.js
if %errorlevel% neq 0 (
    echo ‚ö†Ô∏è Advertencia: Algunas pruebas fallaron
    echo El sistema se desplegar√° pero con funcionalidad limitada
)

echo.

REM Compilar para producci√≥n
echo üî® Compilando para producci√≥n...
call npm run build
if %errorlevel% neq 0 (
    echo ‚ùå Error en compilaci√≥n
    pause
    exit /b 1
)

echo ‚úÖ Compilaci√≥n exitosa
echo.

REM Crear directorios necesarios
echo üìÅ Creando estructura de directorios...
if not exist "temp-processing" mkdir temp-processing
if not exist "videos" mkdir videos
if not exist "videos\leccion-1" mkdir videos\leccion-1
if not exist "videos\leccion-2" mkdir videos\leccion-2

REM Configurar permisos (Windows)
echo üîê Configurando permisos...
icacls "temp-processing" /grant Everyone:(OI)(CI)F /T >nul 2>&1
icacls "videos" /grant Everyone:(OI)(CI)F /T >nul 2>&1

REM Crear script de inicio de producci√≥n
echo üìù Creando script de inicio...
echo @echo off > start-production.bat
echo echo üöÄ Iniciando Pacific Labs LMS en modo producci√≥n... >> start-production.bat
echo set NODE_ENV=production >> start-production.bat
echo call npm start >> start-production.bat

REM Crear script de backup
echo üíæ Creando script de backup...
echo @echo off > backup-system.bat
echo echo üì¶ Creando backup del sistema... >> backup-system.bat
echo set BACKUP_DIR=backup_%date:~-4,4%%date:~-10,2%%date:~-7,2%_%time:~0,2%%time:~3,2% >> backup-system.bat
echo mkdir %%BACKUP_DIR%% >> backup-system.bat
echo xcopy /E /I /H .env %%BACKUP_DIR%%\ >> backup-system.bat
echo xcopy /E /I /H google-cloud-credentials.json %%BACKUP_DIR%%\ >> backup-system.bat
echo xcopy /E /I /H videos %%BACKUP_DIR%%\videos\ >> backup-system.bat
echo xcopy /E /I /H prisma %%BACKUP_DIR%%\prisma\ >> backup-system.bat
echo echo ‚úÖ Backup completado en %%BACKUP_DIR%% >> backup-system.bat

REM Crear script de monitoreo
echo üìä Creando script de monitoreo...
echo @echo off > monitor-system.bat
echo :monitor >> monitor-system.bat
echo cls >> monitor-system.bat
echo echo üìä MONITOR DEL SISTEMA - Pacific Labs LMS >> monitor-system.bat
echo echo ======================================== >> monitor-system.bat
echo echo. >> monitor-system.bat
echo node -e "console.log('üïí Tiempo actual:', new Date().toLocaleString())" >> monitor-system.bat
echo node -e "console.log('üíæ Memoria usada:', Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + ' MB')" >> monitor-system.bat
echo node -e "console.log('‚è±Ô∏è  Uptime:', Math.round(process.uptime() / 60) + ' minutos')" >> monitor-system.bat
echo echo. >> monitor-system.bat
echo echo Presiona Ctrl+C para salir... >> monitor-system.bat
echo timeout /t 30 /nobreak ^>nul >> monitor-system.bat
echo goto monitor >> monitor-system.bat

REM Verificar puertos disponibles
echo üîå Verificando disponibilidad de puertos...
netstat -an | find "3000" >nul
if %errorlevel% equ 0 (
    echo ‚ö†Ô∏è Puerto 3000 en uso. El servidor puede usar otro puerto autom√°ticamente.
) else (
    echo ‚úÖ Puerto 3000 disponible
)

REM Configurar variables de entorno de producci√≥n
echo ‚öôÔ∏è Configurando entorno de producci√≥n...
set NODE_ENV=production
set NEXTAUTH_URL=http://localhost:3000

REM Crear archivo de configuraci√≥n de deployment
echo üìã Creando configuraci√≥n de deployment...
echo { > deployment-config.json
echo   "deploymentDate": "%date% %time%", >> deployment-config.json
echo   "version": "2.0.0", >> deployment-config.json
echo   "environment": "production", >> deployment-config.json
echo   "features": { >> deployment-config.json
echo     "videoAnalytics": true, >> deployment-config.json
echo     "adaptiveStreaming": true, >> deployment-config.json
echo     "googleCloudStorage": true, >> deployment-config.json
echo     "adminDashboard": true >> deployment-config.json
echo   }, >> deployment-config.json
echo   "urls": { >> deployment-config.json
echo     "main": "http://localhost:3000", >> deployment-config.json
echo     "admin": "http://localhost:3000/admin/videos", >> deployment-config.json
echo     "api": "http://localhost:3000/api" >> deployment-config.json
echo   } >> deployment-config.json
echo } >> deployment-config.json

echo.
echo üéâ DEPLOYMENT COMPLETADO EXITOSAMENTE!
echo =====================================
echo.
echo üöÄ INFORMACI√ìN DE DEPLOYMENT:
echo    ‚Ä¢ Versi√≥n: 2.0.0
echo    ‚Ä¢ Fecha: %date% %time%
echo    ‚Ä¢ Entorno: Producci√≥n
echo.
echo üåê URLS DISPONIBLES:
echo    ‚Ä¢ Aplicaci√≥n Principal: http://localhost:3000
echo    ‚Ä¢ Panel de Admin: http://localhost:3000/admin/videos
echo    ‚Ä¢ API de Analytics: http://localhost:3000/api/video-analytics
echo    ‚Ä¢ API de Admin: http://localhost:3000/api/video-admin
echo.
echo üìã COMANDOS DISPONIBLES:
echo    ‚Ä¢ start-production.bat - Iniciar en producci√≥n
echo    ‚Ä¢ backup-system.bat - Crear backup del sistema
echo    ‚Ä¢ monitor-system.bat - Monitorear sistema en vivo
echo    ‚Ä¢ upload-videos-menu.bat - Gestionar videos
echo    ‚Ä¢ video-admin-advanced.js - Administraci√≥n avanzada
echo.
echo üîß HERRAMIENTAS DE GESTI√ìN:
echo    ‚Ä¢ An√°lisis de almacenamiento autom√°tico
echo    ‚Ä¢ Auditor√≠a de integridad de videos
echo    ‚Ä¢ Migraci√≥n a calidad adaptiva
echo    ‚Ä¢ Analytics en tiempo real
echo    ‚Ä¢ Limpieza autom√°tica de archivos
echo.
echo üìö DOCUMENTACI√ìN:
echo    ‚Ä¢ README-COMPLETO.md - Documentaci√≥n completa
echo    ‚Ä¢ SISTEMA_VIDEOS_GUIA_COMPLETA.md - Gu√≠a de videos
echo    ‚Ä¢ GCS_IMPLEMENTATION_SUMMARY.md - Implementaci√≥n GCS
echo.
echo üí° PR√ìXIMOS PASOS:
echo    1. Ejecutar: start-production.bat
echo    2. Abrir: http://localhost:3000
echo    3. Configurar cursos y videos
echo    4. Monitorear con monitor-system.bat
echo.
echo ‚ö†Ô∏è NOTAS IMPORTANTES:
echo    ‚Ä¢ Mant√©n seguros los archivos .env y google-cloud-credentials.json
echo    ‚Ä¢ Ejecuta backups regulares con backup-system.bat
echo    ‚Ä¢ Monitorea el uso de almacenamiento mensualmente
echo    ‚Ä¢ Revisa logs en caso de problemas
echo.
echo üéä ¬°Tu LMS Platform est√° listo para producci√≥n!
echo.
pause