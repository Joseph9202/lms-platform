# ===========================================
# DOCKER COMPOSE - DESARROLLO LOCAL
# ===========================================
# Configuración para desarrollo con Docker

version: '3.8'

services:
  # Aplicación LMS Platform
  lms-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder  # Usar etapa builder para desarrollo
    container_name: lms-platform-dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL}
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - GOOGLE_CLOUD_PROJECT_ID=${GOOGLE_CLOUD_PROJECT_ID}
      - GOOGLE_CLOUD_BUCKET_NAME=${GOOGLE_CLOUD_BUCKET_NAME}
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - MUX_TOKEN_ID=${MUX_TOKEN_ID}
      - MUX_TOKEN_SECRET=${MUX_TOKEN_SECRET}
      - UPLOADTHING_SECRET=${UPLOADTHING_SECRET}
      - UPLOADTHING_APP_ID=${UPLOADTHING_APP_ID}
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - mysql-dev
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Base de datos MySQL para desarrollo
  mysql-dev:
    image: mysql:8.0
    container_name: lms-mysql-dev
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=lms_platform_dev
      - MYSQL_USER=lms_user
      - MYSQL_PASSWORD=lms_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis para cache (opcional)
  redis-dev:
    image: redis:7-alpine
    container_name: lms-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx para desarrollo (opcional)
  nginx-dev:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: lms-nginx-dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/dev.conf:/etc/nginx/nginx.conf
    depends_on:
      - lms-app
    networks:
      - lms-network
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  lms-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
