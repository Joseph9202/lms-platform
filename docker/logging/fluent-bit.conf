# ===========================================
# FLUENT BIT CONFIGURATION
# ===========================================
# Configuraci√≥n para logging centralizado

[SERVICE]
    # Flush interval in seconds
    Flush         5
    # Log level: error, warning, info, debug, trace
    Log_Level     info
    # Daemon mode
    Daemon        off
    # HTTP server for metrics
    HTTP_Server   On
    HTTP_Listen   0.0.0.0
    HTTP_Port     2020
    # Storage configuration
    storage.path              /tmp/flb-storage/
    storage.sync              normal
    storage.checksum          off
    storage.backlog.mem_limit 5M

# ===========================================
# INPUT PLUGINS
# ===========================================

# Application logs from containers
[INPUT]
    Name              tail
    Path              /var/log/containers/lms-platform*.log
    multiline.parser  docker, cri
    Tag               kube.*
    Refresh_Interval  5
    Mem_Buf_Limit     50MB
    Skip_Long_Lines   On
    storage.type      filesystem

# Kubernetes metadata
[INPUT]
    Name                kubernetes
    Match               kube.*
    Kube_URL            https://kubernetes.default.svc:443
    Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token
    Kube_Tag_Prefix     kube.var.log.containers.
    Merge_Log           On
    Merge_Log_Key       log_processed
    K8S-Logging.Parser  On
    K8S-Logging.Exclude Off
    Annotations         Off
    Labels              On

# System logs
[INPUT]
    Name            systemd
    Tag             host.*
    Systemd_Filter  _SYSTEMD_UNIT=docker.service
    Systemd_Filter  _SYSTEMD_UNIT=kubelet.service
    Read_From_Tail  On

# Docker daemon logs
[INPUT]
    Name   tail
    Path   /var/log/docker.log
    Tag    docker.*
    Parser docker

# Nginx access logs
[INPUT]
    Name   tail
    Path   /var/log/nginx/access.log
    Tag    nginx.access
    Parser nginx

# Nginx error logs
[INPUT]
    Name   tail
    Path   /var/log/nginx/error.log
    Tag    nginx.error
    Parser nginx_error

# Application metrics
[INPUT]
    Name            prometheus_scrape
    Host            lms-platform-service
    Port            3000
    Metrics_Path    /api/metrics
    Tag             metrics.lms
    Scrape_Interval 30

# ===========================================
# FILTER PLUGINS
# ===========================================

# Parse JSON logs
[FILTER]
    Name                parser
    Match               kube.*lms-platform*
    Key_Name            log
    Parser              json
    Reserve_Data        True
    Preserve_Key        True

# Add Kubernetes metadata
[FILTER]
    Name                kubernetes
    Match               kube.*
    Merge_Log           On
    Merge_Log_Key       log_processed
    Merge_Log_Trim      On
    Labels              On
    Annotations         On
    K8S-Logging.Parser  On
    K8S-Logging.Exclude Off

# Enrich logs with custom metadata
[FILTER]
    Name    modify
    Match   kube.*lms-platform*
    Add     service lms-platform
    Add     environment ${ENVIRONMENT}
    Add     cluster ${CLUSTER_NAME}
    Add     region ${CLUSTER_REGION}

# Filter out health check logs (reduce noise)
[FILTER]
    Name    grep
    Match   kube.*lms-platform*
    Exclude log .*\/api\/health.*

# Parse log levels
[FILTER]
    Name                parser
    Match               kube.*lms-platform*
    Key_Name            log
    Parser              lms_log_level
    Reserve_Data        True

# Add severity based on log level
[FILTER]
    Name    modify
    Match   kube.*lms-platform*
    Add     severity INFO

[FILTER]
    Name      modify
    Match     kube.*lms-platform*
    Condition Key_value_matches log_level error
    Set       severity ERROR

[FILTER]
    Name      modify
    Match     kube.*lms-platform*
    Condition Key_value_matches log_level warn
    Set       severity WARNING

[FILTER]
    Name      modify
    Match     kube.*lms-platform*
    Condition Key_value_matches log_level debug
    Set       severity DEBUG

# Throttle logs to prevent flooding
[FILTER]
    Name       throttle
    Match      kube.*lms-platform*
    Rate       1000
    Window     300
    Interval   60s

# ===========================================
# OUTPUT PLUGINS
# ===========================================

# Forward to Elasticsearch (production)
[OUTPUT]
    Name            es
    Match           kube.*lms-platform*
    Host            ${ELASTICSEARCH_HOST}
    Port            ${ELASTICSEARCH_PORT}
    Index           lms-platform-logs
    Type            _doc
    Logstash_Format On
    Logstash_Prefix lms-platform
    Logstash_DateFormat %Y.%m.%d
    Time_Key        @timestamp
    Time_Key_Format %Y-%m-%dT%H:%M:%S.%L%z
    Include_Tag_Key On
    Tag_Key         _tag
    HTTP_User       ${ELASTICSEARCH_USER}
    HTTP_Passwd     ${ELASTICSEARCH_PASSWORD}
    TLS             On
    TLS.Verify      On
    Retry_Limit     3
    storage.total_limit_size 10M

# Forward to Google Cloud Logging (if using GKE)
[OUTPUT]
    Name                    stackdriver
    Match                   kube.*lms-platform*
    google_service_credentials /etc/google/auth/application_default_credentials.json
    resource                k8s_container
    k8s_cluster_name        ${CLUSTER_NAME}
    k8s_cluster_location    ${CLUSTER_LOCATION}
    labels_key              labels
    tag_prefix              kube.
    severity_key            severity

# Forward to CloudWatch (if using AWS)
[OUTPUT]
    Name                    cloudwatch_logs
    Match                   kube.*lms-platform*
    region                  ${AWS_REGION}
    log_group_name          /aws/containerinsights/${CLUSTER_NAME}/application
    log_stream_name         ${hostname}-lms-platform
    auto_create_group       true
    log_key                 log
    log_format              json

# Local file output for debugging
[OUTPUT]
    Name  file
    Match kube.*lms-platform*
    Path  /tmp/
    File  lms-platform.log
    Format json_lines

# Prometheus metrics output
[OUTPUT]
    Name       prometheus_exporter
    Match      metrics.*
    Host       0.0.0.0
    Port       2021
    Add_label  service lms-platform
    Add_label  environment ${ENVIRONMENT}

# ===========================================
# PARSERS
# ===========================================

[PARSER]
    Name        json
    Format      json
    Time_Key    timestamp
    Time_Format %Y-%m-%dT%H:%M:%S.%L%z
    Time_Keep   On

[PARSER]
    Name        docker
    Format      json
    Time_Key    time
    Time_Format %Y-%m-%dT%H:%M:%S.%L%z
    Time_Keep   On

[PARSER]
    Name        nginx
    Format      regex
    Regex       ^(?<remote>[^ ]*) (?<host>[^ ]*) (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*?)(?: +\S*)?)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)")?$
    Time_Key    time
    Time_Format %d/%b/%Y:%H:%M:%S %z

[PARSER]
    Name        nginx_error
    Format      regex
    Regex       ^(?<time>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}) \[(?<log_level>\w+)\] (?<pid>\d+)#(?<tid>\d+): (?<message>.*)$
    Time_Key    time
    Time_Format %Y/%m/%d %H:%M:%S

[PARSER]
    Name        lms_log_level
    Format      regex
    Regex       ^.*"level":"(?<log_level>\w+)".*$

# ===========================================
# MULTILINE PARSERS
# ===========================================

[MULTILINE_PARSER]
    name          docker
    type          regex
    flush_timeout 1000
    #
    # Regex rules for multiline parsing
    # ---------------------------------
    #
    # configuration hints:
    #
    #  - first state always has the name: start_state
    #  - every field in the rule must be inside double quotes
    #
    # rules |   state name  | regex pattern                  | next state
    # ------|---------------|--------------------------------------------
    rule      "start_state"   "/^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z|{)/"  "cont"
    rule      "cont"          "/^(?!\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z|{)/"    "cont"

[MULTILINE_PARSER]
    name          cri
    type          regex
    flush_timeout 1000
    # rules |   state name  | regex pattern                                     | next state
    # ------|---------------|--------------------------------------------       |----------
    rule      "start_state"  "/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{9}Z [SF] /" "cont"
    rule      "cont"         "/^(?!\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{9}Z)/"   "cont"
