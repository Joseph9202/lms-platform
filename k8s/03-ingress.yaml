# ===========================================
# INGRESS - LMS PLATFORM
# ===========================================
# Ingress para exponer la aplicación al internet con SSL

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: lms-platform-ingress
  namespace: lms-platform
  annotations:
    # Google Cloud Load Balancer
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.global-static-ip-name: "lms-platform-ip"
    
    # SSL y certificados
    networking.gke.io/managed-certificates: "lms-platform-ssl"
    kubernetes.io/ingress.allow-http: "false"
    
    # Cloud Armor para seguridad
    cloud.google.com/armor-config: '{"lms-platform-policy": "lms-security-policy"}'
    
    # Backend config
    cloud.google.com/backend-config: '{"default": "lms-backend-config"}'
    
    # Rate limiting y timeouts
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    
    # Headers de seguridad
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Strict-Transport-Security "max-age=63072000" always;
spec:
  tls:
  - hosts:
    - your-domain.com
    - www.your-domain.com
    secretName: lms-platform-tls
  rules:
  - host: your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: lms-platform-service
            port:
              number: 80
  - host: www.your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: lms-platform-service
            port:
              number: 80
---
# ===========================================
# MANAGED CERTIFICATE - SSL AUTOMÁTICO
# ===========================================
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: lms-platform-ssl
  namespace: lms-platform
spec:
  domains:
    - your-domain.com
    - www.your-domain.com
---
# ===========================================
# BACKEND CONFIG - CONFIGURACIÓN AVANZADA
# ===========================================
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: lms-backend-config
  namespace: lms-platform
spec:
  # Health check personalizado
  healthCheck:
    checkIntervalSec: 10
    timeoutSec: 5
    healthyThreshold: 1
    unhealthyThreshold: 3
    type: HTTP
    requestPath: /api/health
    port: 3000
  
  # Session affinity
  sessionAffinity:
    affinityType: "CLIENT_IP"
    affinityCookieTtlSec: 3600
  
  # Connection draining
  connectionDraining:
    drainingTimeoutSec: 30
  
  # Timeout settings
  timeoutSec: 30
  
  # Cloud CDN
  cdn:
    enabled: true
    cachePolicy:
      includeHost: true
      includeProtocol: true
      includeQueryString: false
    negativeCaching: true
    negativeCachingPolicy:
    - code: 404
      ttl: 60
    - code: 500
      ttl: 10
  
  # IAP (Identity Aware Proxy) - opcional
  # iap:
  #   enabled: false
  #   oauthclientCredentials:
  #     secretName: oauth-client-secret
---
# ===========================================
# NETWORK POLICY - SEGURIDAD DE RED
# ===========================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: lms-platform-netpol
  namespace: lms-platform
spec:
  podSelector:
    matchLabels:
      app: lms-platform
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          app: lms-platform
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS
    - protocol: TCP
      port: 80   # HTTP
    - protocol: TCP
      port: 3306 # MySQL
    - protocol: TCP
      port: 6379 # Redis
    - protocol: UDP
      port: 53   # DNS
